import lingo/pegcode/driver;

import ds/array;
import ds/set;
import ds/tree;


FOLTerm ::= FOLVar, FOLFunc;

FOLVar(name : string);
FOLFunc(name : string, variables : [FOLTerm]);

FOLForm ::= FOLPred, FOLEq, FOLAll, FOLExist, FOLCon, FOLDis, FOLImpl, FOLNeg;

FOLPred(name : string, variables : [FOLTerm]);
FOLEq(term1 : FOLTerm, term2 : FOLTerm);
FOLAll(bound : FOLVar, form : FOLForm);
FOLExist(bound : FOLVar, form : FOLForm);
FOLCon(form1 : FOLForm, form2 : FOLForm);
FOLDis(form1 : FOLForm, form2 : FOLForm);
FOLImpl(form1 : FOLForm, form2 : FOLForm);
FOLNeg(form : FOLForm);

//глобальные переменные для скорости
curnumbofvars = ref 0;

curnumboffunc = ref 0;

quants: ref [FOLForm] = ref [];

squants: ref [FOLVar] = ref [];



//парсим строки в формулы
s2pf(str : string) -> FOLForm {
    b_gr = "#include FOLparse.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

s2pt(str : string) -> FOLTerm {
    b_gr = "#include FOLparseterm.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

//записываем термы в строки
t2s(tterm : FOLTerm) -> string {
    switch (tterm) {
        FOLVar(name): name;    
        FOLFunc(name, variables): name + "(" + strGlue(map(variables,t2s), ",") + ")";
    }
}

//записываем формулы в строки
pf2s(fform : FOLForm) -> string {
    switch (fform) {
        FOLPred(name, variables): name + "(" + strGlue(map(variables,t2s), ",") + ")";
        FOLEq(term1, term2): t2s(term1) + "=" + t2s(term2);
        FOLAll(bound, form): "A_" + t2s(bound) + "." + pf2s(form);
        FOLExist(bound, form): "E_" + t2s(bound) + "." + pf2s(form);
        FOLCon(form1, form2): "(" + pf2s(form1) +  "/\\"  + pf2s(form2) + ")";
        FOLDis(form1, form2): "(" + pf2s(form1) +  "\\/"  + pf2s(form2) + ")";
        FOLImpl(form1, form2): "(" + pf2s(form1) +  "->"  + pf2s(form2) + ")";
        FOLNeg(form): "Not_"  + pf2s(form);
    }
}

//даем переменным уникальные имена 
newvar() -> FOLVar {
    curnumbofvars := ^curnumbofvars + 1 ;
    FOLVar("x"+i2s(^curnumbofvars));
}

nshortcutall(fform : FOLAll, t : Tree<FOLVar, FOLVar>) -> FOLAll {
    nvar = newvar();
    FOLAll(nvar, befrenamevarsinform(fform.form, setTree(t, fform.bound, nvar)));
}

nshortcutexist(fform : FOLExist, t : Tree<FOLVar, FOLVar>) -> FOLExist {
    nvar = newvar();
    FOLExist(nvar, befrenamevarsinform(fform.form, setTree(t, fform.bound, nvar)));
}

befrenamevarsinform(fform : FOLForm, t : Tree<FOLVar, FOLVar>) -> FOLForm {
    g = \x -> befrenamevarsinterm(x, t);
    switch (fform) {
        FOLPred(name, variables): FOLPred(name,  map(variables,g));
        FOLEq(term1, term2): FOLEq(befrenamevarsinterm(term1, t), befrenamevarsinterm(term2, t));
        FOLAll(bound, form): nshortcutall(fform, t);
        FOLExist(bound, form): nshortcutexist(fform, t);
        FOLCon(form1, form2): FOLCon(befrenamevarsinform(form1,t), befrenamevarsinform(form2,t));
        FOLDis(form1, form2): FOLDis(befrenamevarsinform(form1,t), befrenamevarsinform(form2,t));
        FOLImpl(form1, form2): FOLImpl(befrenamevarsinform(form1,t), befrenamevarsinform(form2,t));
        FOLNeg(form): FOLNeg(befrenamevarsinform(form,t));
    }
}

befrenamevarsinterm(tterm : FOLTerm, t : Tree<FOLVar, FOLVar>) -> FOLTerm {
    g = \x -> befrenamevarsinterm(x, t);
    switch (tterm) {
        FOLVar(name): lookupTreeDef(t, FOLVar(name), FOLVar(name));
        FOLFunc(name, variables): FOLFunc(name, map(variables,g));
    }
}

pfuvar(fform : FOLForm) -> FOLForm {
    befrenamevarsinform(fform, makeTree());
}


//вытаскиваем кванторы, убираем импликации, вносим отрицание
ishortcutexist(fform : FOLExist, out : FOLForm) -> FOLForm {
    quants := arrayPush(^quants, FOLExist(fform.bound,FOLPred("SOME",[])));
    out;
}

ishortcutall(fform : FOLAll, out : FOLForm) -> FOLForm {
    quants := arrayPush(^quants, FOLAll(fform.bound,FOLPred("SOME",[])));
    out;
}

pfbpr(fform : FOLForm) -> FOLForm {
    switch (fform) {
        FOLPred(name, variables): fform;
        FOLEq(term1, term2): fform;
        FOLAll(bound, form): pfbpr(ishortcutall(fform, form));
        FOLExist(bound, form): pfbpr(ishortcutexist(fform, form));
        FOLCon(form1, form2): FOLCon(pfbpr(form1), pfbpr(form2));
        FOLDis(form1, form2): FOLDis(pfbpr(form1), pfbpr(form2));
        FOLImpl(form1, form2): pfbpr(FOLDis(FOLNeg(form1),form2));
        FOLNeg(form): fnotpfbpr(form);
    }
}

fnotpfbpr(fform : FOLForm) -> FOLForm {
    switch (fform) {
        FOLPred(name, variables): FOLNeg(fform);
        FOLEq(term1, term2): FOLNeg(fform);
        FOLAll(bound, form): fnotpfbpr(ishortcutexist(FOLExist(bound, form), form));
        FOLExist(bound, form): fnotpfbpr(ishortcutall(FOLAll(bound, form), form));
        FOLCon(form1, form2): FOLDis(fnotpfbpr(form1), fnotpfbpr(form2));
        FOLDis(form1, form2): FOLCon(fnotpfbpr(form1), fnotpfbpr(form2));
        FOLImpl(form1, form2): fnotpfbpr(FOLDis(FOLNeg(form1),form2));
        FOLNeg(form): pfbpr(form);
    }
}


myfn1(f1 : FOLForm,f2 : FOLForm) -> FOLForm{
    switch (f2) {
        FOLAll(bound, form): FOLAll(bound, f1);
        FOLExist(bound, form): FOLExist(bound, f1);
        default: f1;
    }
}

pf2pf(fform : FOLForm) -> FOLForm {
    foldr(^quants, fform, myfn1);
}

//старое кнф

//когда нашли или
dowor (a1 : FOLForm, a2 : FOLForm) -> FOLForm {
    switch (a1) {
        FOLDis(b1,b2): switch (a2) {
            FOLDis(c1,c2): FOLDis(sforor(a1),sforor(a2));
            FOLCon(c1,c2): FOLCon(FOLDis(a1,c1),FOLDis(a1,c2));
            default: FOLDis(sforor(a1),a2);
            }
        FOLCon(b1,b2): FOLCon(FOLDis(b1,a2),FOLDis(b2,a2));
        default: switch (a2) {
            FOLDis(c1,c2): FOLDis(a1,sforor(a2));
            FOLCon(c1,c2): FOLCon(FOLDis(a1,c1),FOLDis(a1,c2));
            default: FOLDis(a1,a2);
            }
    }
}

//ищем или
sforor (f : FOLForm) -> FOLForm {
    switch (f) {
        FOLDis(a1,a2): dowor(a1,a2);
        FOLCon(a1,a2): FOLCon(sforor(a1),sforor(a2));
        default: f;
    }    
}

//приводим к кнф 
cnf (f : FOLForm) -> FOLForm {
    nf = sforor(f);
    if (f == nf) {
        f;
    }
    else {
        cnf(nf);
    }
}

//CNF
arraycnf (f : FOLForm) -> [[FOLForm]] {
    switch (f) {
        FOLCon(a1,a2): concatA([arraycnf(a1),arraycnf(a2)]);
        FOLDis(a1,a2): [arraycnfd(f)];
        default: [[f]];
    }
}

//кнф в массив на или
arraycnfd (f : FOLForm) -> [FOLForm] {
    switch (f) {
        FOLDis(a1,a2): concatA([arraycnfd(a1),arraycnfd(a2)]);
        default: [f];
    }
}

//кнф сразу в сет
setcnf (ms : FOLForm) -> Set<Set<FOLForm>> {
    buildSet(map(arraycnf(cnf(ms)),buildSet));
}

//Skolem standard form
//даем функциям уникальные имена 
newfunc(args : [FOLTerm]) -> FOLFunc {
    curnumboffunc := ^curnumboffunc + 1 ;
    FOLFunc("f"+i2s(^curnumboffunc), args);
}


myfndumall(mytree : Tree<FOLVar, FOLFunc>,f2 : FOLAll) -> Tree<FOLVar, FOLFunc> {
    squants := arrayPush(^squants, f2.bound);
    mytree;
}

myfndumexist(mytree : Tree<FOLVar, FOLFunc>,f2 : FOLExist) -> Tree<FOLVar, FOLFunc> {
    setTree(mytree, f2.bound, newfunc(^squants));
}

myfn2(mytree : Tree<FOLVar, FOLFunc>,f2 : FOLForm) -> Tree<FOLVar, FOLFunc> {
    switch (f2) {
        FOLAll(bound, form): myfndumall(mytree, FOLAll(bound, form));
        FOLExist(bound, form): myfndumexist(mytree, FOLExist(bound, form));
        default: mytree;
    }
}

//дерево замен и обновление кванторов
q2t(quan : [FOLForm]) -> Tree<FOLVar, FOLFunc> {
    fold(quan, makeTree(), myfn2);
}

// подстановка функций
myfn4(tterm: FOLTerm, vtree : Tree<FOLVar, FOLFunc>) -> FOLTerm {
    g = \x -> myfn4(x, vtree);
    switch (tterm) {
        FOLVar(name): lookupTreeDef(vtree, FOLVar(name), FOLVar(name));
        FOLFunc(name, variables): FOLFunc(name, map(variables,g));
    }
}

myfn3(fform: FOLForm, vtree : Tree<FOLVar, FOLFunc>) -> FOLForm {
    g = \x -> myfn4(x, vtree);
    switch (fform) {
        FOLPred(name, variables): FOLPred(name, map(variables,g));
        FOLEq(term1, term2): FOLEq(g(term1),g(term1));
        FOLNeg(form): FOLNeg(myfn3(form, vtree));
        default: fform;
    }
}

//сколемовская нормальная формула
snf(form : Set<Set<FOLForm>>) -> Set<Set<FOLForm>> {
    vtree = q2t(^quants);
    g = \x -> myfn3(x, vtree);
    myfn = \x -> mapSet(x, g);
    mapSet(form, myfn);
}

//печатаем snf
nicesetcnfprint (ms : Set<Set<FOLForm>>) -> void {
    g = \m -> mapSet(m,pf2s);
    ft = mapSet(ms,g);
    st = mapSet(ft,set2array);
    println(set2array(st));
}

snfprint(form : Set<Set<FOLForm>>) -> void {
    println("A_");
    g = \x ->println(t2s(x)+" ");
    iter(^squants, g);
    nicesetcnfprint(form);
}

//унификаторы

//применяем подстановку
usesubform(fform : FOLForm, ttree : Tree<FOLVar,FOLTerm>) -> FOLForm{
    g = \x -> usesubterm(x, ttree);
    switch (fform) {
        FOLPred(name, variables): FOLPred(name, map(variables,g));
        FOLEq(term1, term2): FOLEq(g(term1),g(term2));
        FOLNeg(form): FOLNeg(usesubform(form, ttree));
        default: fform;
    }
}

usesubterm(tterm : FOLTerm, ttree : Tree<FOLVar,FOLTerm>) -> FOLTerm{
    g = \x -> usesubterm(x, ttree);
    switch (tterm) {
        FOLVar(name): usesubvar(FOLVar(name), ttree);
        FOLFunc(name, variables): FOLFunc(name, map(variables,g));
    }
}

usesubvar(vvar : FOLVar, ttree : Tree<FOLVar,FOLTerm>) -> FOLTerm{
    lookupTreeDef(ttree, vvar, vvar);
}


//композиция подстановок
compsub(tree1 : Tree<FOLVar,FOLTerm>, tree2 : Tree<FOLVar,FOLTerm>) -> Tree<FOLVar,FOLTerm> {
    newtree1 = mapTree(tree1, \x -> usesubterm(x, tree2));
    newtree = mergeTree(tree2, newtree1);
    filterTree(newtree, \k,v -> k != v);
}

varinterm(vvar : FOLVar, tterm : FOLTerm) -> bool {
    switch (tterm){
        FOLFunc(name, variables): exists(variables, \x -> varinterm(vvar, x));
        FOLVar(name): vvar == FOLVar(name);
    }
}

tunifer(term1 : FOLTerm, term2 : FOLTerm)-> Maybe<Tree<FOLVar,FOLTerm>> {
    switch (term1) {
        FOLFunc(name, variables): {
            switch (term2) {
                FOLFunc(name2, variables2): if (name == name2) tsunifer(variables, variables2) else None();
                FOLVar(name2): if (!varinterm(FOLVar(name2),term1)) Some(makeTree1(FOLVar(name2), term1)) else None(); 
            }
        }

        FOLVar(name): {
            switch (term2) {
                FOLFunc(name2, variables2): if (!varinterm(FOLVar(name),term2)) Some(makeTree1(FOLVar(name), term2)) else None();
                FOLVar(name2): Some(makeTree1(term1, term2))
            }
        }
    }
}

myfn5(mtree : Maybe<Tree<FOLVar,FOLTerm>>, term : Pair<FOLTerm,FOLTerm>) -> Maybe<Tree<FOLVar,FOLTerm>> {
    switch (mtree) {
        None(): None();
        Some(ttree): switch (tunifer(usesubterm(term.first, ttree), usesubterm(term.second, ttree))) {
            None(): None();
            Some(tttree) : Some(compsub(ttree, tttree));
        }
    }
}


//унификация
tsunifer(terms1 : [FOLTerm], terms2 : [FOLTerm]) -> Maybe<Tree<FOLVar,FOLTerm>> {
    if (length(terms1) == length(terms2)) tsuniferr(zipWith(terms1,terms2,\x,y->Pair(x,y))) else None()
}

tsuniferr(terms : [Pair<FOLTerm,FOLTerm>]) -> Maybe<Tree<FOLVar,FOLTerm>> {
    foldr(terms, Some(makeTree()), myfn5);
}

// унификация литералов без отрицания
bfsunifer(fform1 : FOLForm, fform2 : FOLForm) -> Maybe<Tree<FOLVar,FOLTerm>> {
    switch (fform1) {
        FOLEq(form1,form2) : switch (fform2) {
            FOLEq(form3,form4) : {
                    g = tsunifer([form1,form2],[form3,form4]);
                    switch (g) {
                        None() : tsunifer([form1,form2],[form4,form3]);
                        default : g;
                }
            }
            default : None();
        }
        FOLPred(name1,vars1): switch (fform2) {
            FOLPred(name2,vars2): if (name1 == name2) tsunifer(vars1, vars2) else None();
            default : None();
        }
        default : None();
    }
}

// унификация литералов c отрицанием
bfsuniferwn(fform1 : FOLForm, fform2 : FOLForm) -> Maybe<Tree<FOLVar,FOLTerm>> {
    switch (fform1) {
    FOLNeg(form) : bfsunifer(form, fform2);
    default : switch (fform2) {
            FOLNeg(form) : bfsunifer(fform1, form);
            default : None();        
        }
    }
}

// унификация литералов c отрицанием для факторинга
fbfsuniferwn(fform1 : FOLForm, fform2 : FOLForm) -> Maybe<Tree<FOLVar,FOLTerm>> {
    switch (fform1) {
        FOLNeg(form1) : switch (fform2) {
            FOLNeg(form2) : bfsunifer(form1, form2);
            default : None();  
        }
    default : switch (fform2) {
            FOLNeg(form) : None();
            default : bfsunifer(fform1, fform2);       
        }
    }
}

//с равенством возможна проблема, так как унификатор выдает всего одно значение, а возможно два
//резольвента
//нахождение всех переменных и задание новых имен
findallvarsss(tterm : FOLTerm) -> Tree<FOLVar,bool> {
    switch (tterm) {
        FOLVar(name) : makeTree1(tterm, true);
        FOLFunc(name,variables): fold(variables, makeTree(), \x,y -> mergeTree(x, findallvarsss(y)));
    }
}

findallvarss(fform : FOLForm) -> Tree<FOLVar,bool> {
    switch (fform) {
        FOLNeg(form) : findallvarss(form);
        FOLEq(form1,form2) : mergeTree(findallvarsss(form1),findallvarsss(form2));
        FOLPred(name, variables) : fold(variables, makeTree(), \x,y -> mergeTree(x, findallvarsss(y)));
        default: makeTree();
    }
}

findallvars(disj1 : Set<FOLForm>) -> Tree<FOLVar,FOLTerm> {
    mapTree(foldSet(disj1, makeTree(), \x,y -> mergeTree(x, findallvarss(y))), \x->newvar()) ;
}

//новые переменные в клозе
newclausevars(disj1 : Set<FOLForm>) -> Set<FOLForm> {
    newvarss = findallvars(disj1);
    mapSet(disj1,\x->usesubform(x, newvarss));
}


bresolve(disj1 : Set<FOLForm>, disj2 : Set<FOLForm>, fform1 : FOLForm, fform2 : FOLForm) -> [Set<FOLForm>] {
    switch(bfsuniferwn(fform1, fform2)) {
        None(): [];
        Some(ttree) : 
            {
                [mapSet(mergeSets(removeSet(disj1, fform1), removeSet(disj2, fform2)),\x->usesubform(x, ttree))];
            }
    }
}

//правило разрешения по резолюции
resolve(disj1 : Set<FOLForm>, disj2 : Set<FOLForm>) -> [Set<FOLForm>] {
    ndisj1 = newclausevars(disj1);
    ndisj2 = newclausevars(disj2);
    foldSet(ndisj1, [], \a,b->concat(a, foldSet(ndisj2, [], \c,d->concat(c, bresolve(ndisj1, ndisj2, b, d)))));
}

//пока без факторизации
mresolve(disj1 : Set<FOLForm>, disj2 : Set<FOLForm>) -> Maybe<[Set<FOLForm>]> {
    newr = resolve(disj1, disj2);
    if (contains(newr, makeSet())) {
        None();
    }  
    else {
        Some(newr);
    }
}

rrfnn(h : Maybe<[Set<FOLForm>]>, disj1 : Set<FOLForm>, disj2 : Set<FOLForm> ) -> Maybe<[Set<FOLForm>]> {

    switch (h) {
        None() : h;
        Some(odis) : {
            switch (mresolve(disj1,disj2)) {
                None() : None();
                Some(ndis) : Some(concat(odis, ndis));
            }
        }
    }
}

rrffnn(h : Maybe<[Set<FOLForm>]>, disj : Set<FOLForm>, disjs : [Set<FOLForm>] ) -> Maybe<[Set<FOLForm>]> {
    
    switch (h) {
        None() : h;
        Some(odis) : {
            switch (fold(disjs, Some([]), (\a,b -> rrfnn(a, b, disj )))) {
                None() : None();
                Some(ndis) : Some(concat(odis, ndis));
            }
        }
    }
}


//один шаг 
resstepon(old : [Set<FOLForm>], new : [Set<FOLForm>]) -> Maybe<[Set<FOLForm>]> {
    fold(old, Some([]), (\x,y -> rrffnn(x, y, new)));
}

resstepnn(new : [Set<FOLForm>]) -> Maybe<[Set<FOLForm>]> {
    foldi(new, Some([]), (\i,x,y -> rrffnn(x, y, tailFrom(new, i + 1))));
}

bincon(old : [Set<FOLForm>], new : [Set<FOLForm>]) -> bool {
    switch (resstepon(old,new)) {
        None() : true;
        Some(n1) : switch (resstepon(old,new)) {
            None() : true;
            Some(n2) : {
                n = concat(n1,n2);
                if (length(n) == 0) false else bincon(concat(old,new), n);
            }
        }
    }
}

incon(form : Set<Set<FOLForm>>) -> bool {
    ar = set2array(form);
    if (length(ar) < 2) {
        false;
    }
    else {
        switch (resstepnn(ar)) {
            None() : true;
            Some(n) : {
                bincon(ar, n);
            }
        }
    }
}

//факторинг
fnfnfn(a1 : FOLForm, a2 : FOLForm, disj : Set<FOLForm>) -> [Set<FOLForm>]{
    switch(fbfsuniferwn(a1,a2)) {
        None() : [];
        Some(ttree) : [mapSet(removeSet(disj,a1),\x->usesubform(x, ttree))];
    }
}

ofactor(disj : Set<FOLForm>) -> [Set<FOLForm>]{
    ar = set2array(disj);
    foldi(ar, [], \i,a,b->concat(a,fold(tailFrom(ar, i+1), [], \x,y->concat(x,fnfnfn(b,y,disj)))));
}

newfactor(old : [Set<FOLForm>]) -> [Set<FOLForm>] {
    fold(old, [], \x,y -> concat(x,ofactor(y)));
}

bfullfactor(old : [Set<FOLForm>], new : [Set<FOLForm>]) -> [Set<FOLForm>] {
    nnew = newfactor(new);
    oold = concat(old,new);
    if (length(oold)==0) {
        oold;
    }
    else {
        bfullfactor(oold,nnew);
    }
}

fullfactor(forms : [Set<FOLForm>]) -> [Set<FOLForm>] {
    bfullfactor([],forms);
}

main() {
    test27() ;
}

//тестируем факторинг
test27() -> void {
    mystr = "((P(f(u))\\/P(v))\\/P(g(w)))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    ar = set2array(myset);
    println(ar[0]);
    of = ofactor(ar[0]);
    println(of);
}

//еще более трудный тест
test26() -> void {
    mystr = "(A_x.(E(x)/\\(Not_V(x)->E_y.(S(x,y)/\\C(y))))/\\(E_x.((P(x)/\\E(x))/\\A_y.(S(x,y)->P(y)))/\\(A_x.(P(x)->Not_V(x))/\\Not_E_x.(P(x)/\\C(x)))))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

//более сложный тест
test25() -> void {
    mystr = "((A_x.(C(x)->(W(x)/\\R(x)))/\\E_x.(C(x)/\\O(x)))/\\Not_E_x.(O(x)/\\R(x)))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

//что-то без факторизации
test24() -> void {
    mystr = "((((P()\\/Q())/\\(Not_P()\\/Q()))/\\(P()\\/Not_Q()))/\\(Not_P()\\/Not_Q()))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

//не работает
test23() -> void {
    mystr = "((P(u)\\/P(f(u)))/\\((Not_P(v)\\/P(f(w)))/\\(Not_P(x)\\/Not_P(f(x)))))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

test22() -> void {
    mystr = "(A_x.(P(x)->Q(x))/\\(A_x.(Q(x)->R(x))/\\Not_A_x.(P(x)->R(x))))";
    println(mystr);
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

test21() -> void {
    //mystr = "(P(x)/\\(Q(z)\\/Not_P(x)))";
    //mystr = "(P(x)/\\(Q(z)/\\Not_P(x)))";
    //mystr = "(P(x)/\\(Q(z)/\\Not_G(x)))";
    mystr = "(P(f(a,a,a,a,a))/\\(Q(z)/\\Not_P(f(g(a),f(b),c,d,e))))";
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

test20() -> void {
    mystr = "(P(x)/\\Not_P(x))";
    myset = snfonefunc(mystr);
    nicesetcnfprint(myset);
    println(incon(myset));
}

test19() -> void {
    mystr = "(P(x)/\\Not_P(x))";
    myset = snfonefunc(mystr);
    myar = set2array(myset);
    nicesetcnfprint(myset);
    println(resstepnn(myar));
}

test18() -> void {
    mystr = "((P(u)\\/P(f(u)))/\\(Not_P(v)\\/P(f(w))))";
    myset = snfonefunc(mystr);
    myar = set2array(myset);
    nicesetcnfprint(myset);
    println(resstepon([myar[0]],[myar[1]]));
}

test17() -> void {
    mystr = "(P(x)/\\Not_P(x))";
    myset = snfonefunc(mystr);
    myar = set2array(myset);
    nicesetcnfprint(myset);
    println(mresolve(myar[0],myar[1]));
}

test16() -> void {
    //mystr = "(((Not_P(x)\\/Q(x))\\/G(x))/\\((P(z)\\/Not_Q(z))\\/Not_G(z)))";
    mystr = "((P(u)\\/P(f(u)))/\\(Not_P(v)\\/P(f(w))))";
    myset = snfonefunc(mystr);
    myar = set2array(myset);
    nicesetcnfprint(myset);
    myres = resolve(myar[0],myar[1]);
    nicesetcnfprint(buildSet(myres));
}

test15() -> void {
    mystr = "((Not_P(x)\\/Q(x))/\\(P(z)\\/Not_Q(z)))";
    myset = snfonefunc(mystr);
    myar = set2array(myset);
    nicesetcnfprint(myset);
    myres = resolve(myar[0],myar[1]);
    println(myres);
}

test14() -> void {
    str1 = "g(x)=f(x)";
    str2 = "Not_b=g(g(a))";
    str3 = "g(x)=f(x)";
    str4 = "Not_b=g(g(a))";
    println(str1 + "," + str2);
    println(str3 + "," + str4);
    cl1 = buildSet([s2pf(str1),s2pf(str2)]);
    cl2 = buildSet([s2pf(str3),s2pf(str4)]);
    //nicesetcnfprint(buildSet(bresolve(cl1,cl2,s2pf(str1),s2pf(str4))));
    res = resolve(cl1,cl2);
    iter(res,\x->nicesetcnfprint(makeSet1(x)));
}

test13() -> void {
    fststr = "g(x)=f(x)";
    sndstr = "Not_b=g(g(a))";
    println(fststr);
    println(sndstr);
    lit1 = s2pf(fststr);
    lit2 = s2pf(sndstr);
    println(bfsuniferwn(lit1,lit2));    
}

test12() -> void {
    fststr = "P(x,y,z)";
    sndstr = "P(a,b,c)";
    println(fststr);
    println(sndstr);
    lit1 = s2pf(fststr);
    lit2 = s2pf(sndstr);
    println(bfsunifer(lit1,lit2));    
}

test11() -> void {
    mystring = "A_x.E_y.E_z.((Not_P(x,y,c)/\\Q(x,z,c))\\/R(x,y,z,c,b))";
    println(mystring);
    in = s2pf(mystring);
    out1 = pfuvar(in);
    out2 = pfbpr(out1);
    out3 = setcnf(out2);
    out4 = snf(out3);
    snfprint(out4);
    out5 = mapSet(out4,newclausevars);
    snfprint(out5);
}

test10() -> void {
    f1 = s2pt("x");
    f2 = s2pt("f(g(y))");
    f3 = s2pt("x");
    f4 = s2pt("f(g(y))");
    ts1 = [f1,f3];
    ts2 = [f2,f4];
    println(map(ts1, \x-> (t2s(x))));
    println(map(ts2, \x-> (t2s(x))));
    unif = tsunifer(ts1,ts2);
    switch (unif){
        None() : println("can't be unificated!");
        Some(ttree) : {
            println(ttree);
            println(map(ts1, \x-> (t2s(usesubterm(x, ttree)))));
            println(map(ts2, \x-> (t2s(usesubterm(x, ttree)))));
        }
    }
}

test9() -> void {
    f1 = s2pt("f(x,y,g(z,e))");
    f2 = s2pt("f(a,b,g(c,d))");
    f3 = s2pt("x");
    f4 = s2pt("n()");
    f5 = s2pt("mn");
    f6 = s2pt("mg");
    ts1 = [f1,f3,f5];
    ts2 = [f2,f4,f6];
    println(map(ts1, \x-> (t2s(x))));
    println(map(ts2, \x-> (t2s(x))));
    unif = tsunifer(ts1,ts2);
    switch (unif){
        None() : println("can't be unificated!");
        Some(ttree) : {
            println(ttree);
            println(map(ts1, \x-> (t2s(usesubterm(x, ttree)))));
            println(map(ts2, \x-> (t2s(usesubterm(x, ttree)))));
        }
    }
}

test8() -> void {
    println(usesubterm(FOLFunc("f",[FOLVar("x")]), makeTree1(FOLVar("x"),FOLFunc("f",[FOLVar("y")]))));
}

test1() -> void {
    mystring = "A_x.E_y.Not_(P(g(x))->Q(y))"; 
    println(mystring);
    out = s2pf(mystring);
    println(out);
    println(pf2s(out));
}

test2() -> void {
    //mystring = "A_x.E_y.Not_(P(g(x))->Q(y))"; 
    mystring = "E_y.A_x.(P(x,y,z)/\\E_x.G(x,y,t))";
    println(mystring);
    in = s2pf(mystring);
    out = pfuvar(in);
    println(pf2s(out));
}

test3() -> void { 
    //mystring = "E_y.A_x.(P(x,y,z)/\\E_x.G(x,y,t))";
    //mystring = "Not_A_x.P(x)";
    //mystring = "Not_E_x.P(x)";
    mystring = "(A_x.G(x)->Not_A_x.P(x))";
    println(mystring);
    in = s2pf(mystring);
    out = pfuvar(in);
    println(pf2s(out));
    nout = pfbpr(out);
    println(pf2s(nout));
}

test4() -> void { 
    mystring = "A_x.A_y.(E_z.(P(x,z)/\\P(y,z))->E_u.Q(x,y,u))";
    println(mystring);
    in = s2pf(mystring);
    out = pfuvar(in);
    println(pf2s(out));
    nout = pfbpr(out);
    println(pf2s(nout));
    println(^quants);
}

test5() -> void { 
    mystring = "A_x.A_y.(E_z.(P(x,z)/\\P(y,z))->E_u.Q(x,y,u))";
    println(mystring);
    in = s2pf(mystring);
    out = pfuvar(in);
    nout = pfbpr(out);
    println(pf2s(pf2pf(cnf(nout))));
}

test6() -> void {
    mystring = "E_x.A_y.A_z.E_u.A_v.E_w.P(x,y,z,u,v,w)";
    println(mystring);
    in = s2pf(mystring);
    out1 = pfuvar(in);
    out2 = pfbpr(out1);
    out3 = setcnf(out2);
    out4 = snf(out3);
    snfprint(out4);
}

test7() -> void {
    mystring = "A_x.E_y.E_z.((Not_P(x,y)/\\Q(x,z))\\/R(x,y,z))";
    println(mystring);
    in = s2pf(mystring);
    out1 = pfuvar(in);
    out2 = pfbpr(out1);
    out3 = setcnf(out2);
    out4 = snf(out3);
    snfprint(out4);
}

//пирведение к snf в одной функции
snfonefunc(str : string) -> Set<Set<FOLForm>> {
    snf(setcnf(pfbpr(pfuvar(s2pf(str)))));
}