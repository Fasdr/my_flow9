import lingo/pegcode/driver;
import ds/tree;

BoolForm ::= BoolAdd,BoolMult,BoolImpl,BoolNeg,BoolTrue,BoolFalse,BoolVar;
BoolAdd(a1:BoolForm,a2:BoolForm);
BoolMult(a1:BoolForm,a2:BoolForm);
BoolImpl(a1:BoolForm,a2:BoolForm);
BoolNeg(a1:BoolForm);
BoolTrue();
BoolFalse();
BoolVar(a:string);

//парсим строки в формулы
s2bf(str : string) -> BoolForm {
    b_gr = "#include bool.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

//записываем формулы в строки
bf2s(f : BoolForm) -> string {
    switch (f) {
        BoolAdd(a1,a2): "(" + bf2s(a1) + "\\/" +  bf2s(a2) + ")";
        BoolMult(a1,a2): "(" + bf2s(a1) + "/\\" +  bf2s(a2) + ")";
        BoolImpl(a1,a2): "(" + bf2s(a1) + "->" + bf2s(a2) + ")";
        BoolNeg(a1): "Not_"  + bf2s(a1);
        BoolTrue(): "T";
        BoolFalse(): "F";
        BoolVar(a): a;
    }
}

//находим переменные в формуле
favit(f : BoolForm) -> [string] {
        switch (f) {
        BoolAdd(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolMult(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolImpl(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolNeg(a1): favit(a1);
        BoolTrue(): [];
        BoolFalse(): [];
        BoolVar(a): [a];
    }
}

//записываем переменные из формулы в дерево с дефолтным значением true
bf2t(f : BoolForm) -> Tree<string, bool> {
    mas = favit(f);
    new_tree = makeTree();
    g = \t,e->setTree(t,e, true);
    fold(mas, new_tree, g);
}

//ищем значение по дереву с дефолтным значением true
tiv(t : Tree<string, bool>, s : string) -> bool {
    lookupTreeDef(t, s, true);
}

//вычисляем формулы
evf(f : BoolForm, t : Tree<string, bool>) -> bool {
        switch (f) {
        BoolAdd(a1,a2): evf(a1,t)||evf(a2,t);
        BoolMult(a1,a2):  evf(a1,t)&&evf(a2,t);
        BoolImpl(a1,a2): evf(a1,t)->evf(a2,t);
        BoolNeg(a1): !evf(a1,t);
        BoolTrue(): true;
        BoolFalse(): false;
        BoolVar(a): tiv(t,a);
    }    
}

//прикрепляем деревья
mt2mt1(tl : Tree<?, ??>, tc : Tree<?, ??>, tr : Tree<?, ??> ) -> Tree<?, ??> {
    switch (tc) {
        TreeEmpty() : TreeEmpty();
        TreeNode(key, value, left, right, depth) : TreeNode(key, value, tl, tr, depth);
    } 
}

//прикреплеям массив деревьев к одному дереву
mt2mt2(ml : [Tree<?, ??>], tc : Tree<?, ??>, mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    f = \r -> map(ml,(\l->mt2mt1(l,tc,r)));
    concatA(map(mr, f));
}

//прикрепляем массив деревьев
mt2mt3(ml : [Tree<?, ??>], mc : [Tree<?, ??>], mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    concatA(map(mc,(\c->mt2mt2(ml,c,mr))));
}

//создаем все варинты значений для дерева
t2mts (t : Tree<string, bool>) -> [Tree<string, bool>] {
    switch (t) {
        TreeEmpty() : [TreeEmpty()];
        TreeNode(key, value, left, right, depth) : mt2mt3(t2mts(left),[TreeNode(key, true, left, right, depth),TreeNode(key, false, left, right, depth)],t2mts(right));
    }
}

//проверяем формулу из строки
chf(str : string) -> bool {
    form = s2bf(str);
    vars = t2mts(bf2t(form));
    out = findiDef(map(vars,(\vs->evf(form, vs))),\x->x,-1);
    if (out == -1) {
        false;
    }
    else {
        println(vars[out]);
        true;
    }
}

main() {
    xx = "((z\\/x)/\\((Not_a/\\T)->(b\\/Not_y)))";
    x = "(Not_a/\\Not_b)";
    println(chf(x));
}
