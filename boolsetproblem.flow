import lingo/pegcode/driver;
import ds/tree;

BoolForm ::= BoolAdd,BoolMult,BoolImpl,BoolNeg,BoolTrue,BoolFalse,BoolVar;
BoolAdd(a1:BoolForm,a2:BoolForm);
BoolMult(a1:BoolForm,a2:BoolForm);
BoolImpl(a1:BoolForm,a2:BoolForm);
BoolNeg(a1:BoolForm);
BoolTrue();
BoolFalse();
BoolVar(a:string);

s2bf(str : string) -> BoolForm {
    b_gr = "#include bool.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

bf2s(f : BoolForm) -> string {
    switch (f) {
        BoolAdd(a1,a2): "(" + bf2s(a1) + "\\/" +  bf2s(a2) + ")";
        BoolMult(a1,a2): "(" + bf2s(a1) + "/\\" +  bf2s(a2) + ")";
        BoolImpl(a1,a2): "(" + bf2s(a1) + "->" + bf2s(a2) + ")";
        BoolNeg(a1): "Not_"  + bf2s(a1);
        BoolTrue(): "T";
        BoolFalse(): "F";
        BoolVar(a): a;
    }
}

favit(f : BoolForm) -> [string] {
        switch (f) {
        BoolAdd(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolMult(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolImpl(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolNeg(a1): favit(a1);
        BoolTrue(): [];
        BoolFalse(): [];
        BoolVar(a): [a];
    }
}

bf2t(f : BoolForm) -> Tree<string, bool> {
    mas = favit(f);
    new_tree = makeTree();
    g = \t,e->setTree(t,e, true);
    fold(mas, new_tree, g);
}

tiv(t : Tree<string, bool>, s : string) {
    lookupTreeDef(t, s, true);
}

main() {
    x = "((z\\/x)/\\((F/\\T)->(x\\/Not_y)))";
    y = s2bf(x);
    z = bf2s(y);
    vars = bf2t(y);
    println(y);
    println(z);
    println(vars);
}
