import lingo/pegcode/driver;
import ds/tree;
import math/math;

BoolForm ::= BoolAdd,BoolMult,BoolImpl,BoolNeg,BoolTrue,BoolFalse,BoolVar;
BoolAdd(a1:BoolForm,a2:BoolForm);
BoolMult(a1:BoolForm,a2:BoolForm);
BoolImpl(a1:BoolForm,a2:BoolForm);
BoolNeg(a1:BoolForm);
BoolTrue();
BoolFalse();
BoolVar(a:string);

//рандомное чилсо от 0 до r-1
myrandom(r : int) -> int {
    d = random();
    n = d*i2d(r);
    floor(n);
}

//генерируем случайную формулу с ограничением на максимальное число переменных, глубину дерева и контороль роста дерева
randomformgen(maxdepth : int, maxnumbofvars : int, grate : int) -> BoolForm {
    vars = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m","n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    br = myrandom(maxdepth*grate);
    if (br == 0) {
        fr = myrandom(6);
        if (fr == 0) {BoolTrue()}
        else if (fr == 1) {BoolFalse()}
        else {BoolVar(vars[myrandom(maxnumbofvars)])}
    }
    else{
        fr = myrandom(4);
        if (fr == 0) {BoolAdd(randomformgen(maxdepth - 1, maxnumbofvars, grate),randomformgen(maxdepth - 1, maxnumbofvars, grate))}
        else if (fr == 1) {BoolMult(randomformgen(maxdepth - 1, maxnumbofvars, grate),randomformgen(maxdepth - 1, maxnumbofvars, grate))}
        else if (fr == 2) {BoolImpl(randomformgen(maxdepth - 1, maxnumbofvars, grate),randomformgen(maxdepth - 1, maxnumbofvars, grate))}
        else {BoolNeg(randomformgen(maxdepth - 1, maxnumbofvars, grate))}
    }
}




//парсим строки в формулы
s2bf(str : string) -> BoolForm {
    b_gr = "#include bool.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

//записываем формулы в строки
bf2s(f : BoolForm) -> string {
    switch (f) {
        BoolAdd(a1,a2): "(" + bf2s(a1) + "\\/" +  bf2s(a2) + ")";
        BoolMult(a1,a2): "(" + bf2s(a1) + "/\\" +  bf2s(a2) + ")";
        BoolImpl(a1,a2): "(" + bf2s(a1) + "->" + bf2s(a2) + ")";
        BoolNeg(a1): "Not_"  + bf2s(a1);
        BoolTrue(): "T";
        BoolFalse(): "F";
        BoolVar(a): a;
    }
}

//находим переменные в формуле
favit(f : BoolForm) -> [string] {
        switch (f) {
        BoolAdd(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolMult(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolImpl(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolNeg(a1): favit(a1);
        BoolTrue(): [];
        BoolFalse(): [];
        BoolVar(a): [a];
    }
}

//записываем переменные из формулы в дерево с дефолтным значением true
bf2t(f : BoolForm) -> Tree<string, bool> {
    mas = favit(f);
    new_tree = makeTree();
    g = \t,e->setTree(t,e, true);
    fold(mas, new_tree, g);
}

//ищем значение по дереву с дефолтным значением true
tiv(t : Tree<string, bool>, s : string) -> bool {
    lookupTreeDef(t, s, true);
}

//вычисляем формулы
evf(f : BoolForm, t : Tree<string, bool>) -> bool {
        impl = \x,y -> (!x)||y;
        switch (f) {
        BoolAdd(a1,a2): evf(a1,t)||evf(a2,t);
        BoolMult(a1,a2): evf(a1,t)&&evf(a2,t);
        BoolImpl(a1,a2): impl(evf(a1,t),evf(a2,t));
        BoolNeg(a1): !evf(a1,t);
        BoolTrue(): true;
        BoolFalse(): false;
        BoolVar(a): tiv(t,a);
    }    
}

//прикрепляем деревья
mt2mt1(tl : Tree<?, ??>, tc : Tree<?, ??>, tr : Tree<?, ??> ) -> Tree<?, ??> {
    switch (tc) {
        TreeEmpty() : TreeEmpty();
        TreeNode(key, value, left, right, depth) : TreeNode(key, value, tl, tr, depth);
    } 
}

//прикреплеям массив деревьев к одному дереву
mt2mt2(ml : [Tree<?, ??>], tc : Tree<?, ??>, mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    f = \r -> map(ml,(\l->mt2mt1(l,tc,r)));
    concatA(map(mr, f));
}

//прикрепляем массив деревьев к массиву деревьев
mt2mt3(ml : [Tree<?, ??>], mc : [Tree<?, ??>], mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    concatA(map(mc,(\c->mt2mt2(ml,c,mr))));
}

//создаем все варинты значений для дерева
t2mts (t : Tree<string, bool>) -> [Tree<string, bool>] {
    switch (t) {
        TreeEmpty() : [TreeEmpty()];
        TreeNode(key, value, left, right, depth) : mt2mt3(t2mts(left),[TreeNode(key, true, left, right, depth),TreeNode(key, false, left, right, depth)],t2mts(right));
    }
}

//проверяем формулу из строки
chf(str : string) -> bool {
    form = s2bf(str);
    vars = t2mts(bf2t(form));
    out = findiDef(map(vars,(\vs->evf(form, vs))),\x->x,-1);
    if (out == -1) {
        false;
    }
    else {
        println(vars[out]);
        true;
    }
}

//проверяем формулу
chff(form : BoolForm) -> bool {
    vars = t2mts(bf2t(form));
    out = findiDef(map(vars,(\vs->evf(form, vs))),\x->x,-1);
    if (out == -1) {
        false;
    }
    else {
        println(vars[out]);
        true;
    }
}

main() {
    maxdepth = 15;
    maxnumbofvars = 5;
    grate = 10;
    form = randomformgen(maxdepth,maxnumbofvars,grate);
    println(bf2s(form));
    println(chff(form));
}
