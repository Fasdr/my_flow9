import lingo/pegcode/driver;
import ds/tree;
import math/math;
import ds/set;

BoolForm ::= BoolAdd,BoolMult,BoolImpl,BoolNeg,BoolTrue,BoolFalse,BoolVar;
BoolAdd(a1:BoolForm,a2:BoolForm);
BoolMult(a1:BoolForm,a2:BoolForm);
BoolImpl(a1:BoolForm,a2:BoolForm);
BoolNeg(a1:BoolForm);
BoolTrue();
BoolFalse();
BoolVar(a:string);

//рандомное чилсо от 0 до r-1
myrandom(r : int) -> int {
    d = random();
    n = d*i2d(r);
    floor(n);
}

//генерируем случайную формулу с ограничением на максимальное число переменных, глубину дерева и контороль роста дерева
randomformgen(maxdepth : int, maxnumbofvars : int, grate : int, multrate : int) -> BoolForm {
    vars = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m","n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
    br = myrandom(maxdepth*grate);
    if (br == 0) {
        fr = myrandom(6);
        if (fr == 0) {BoolTrue()}
        else if (fr == 1) {BoolFalse()}
        else {BoolVar(vars[myrandom(maxnumbofvars)])}
    }
    else{
        fr = myrandom(3 + multrate);
        if (fr == 0) {BoolNeg(randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate))}
        else if (fr == 1) {BoolAdd(randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate),randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate))}
        else if (fr == 2) {BoolImpl(randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate),randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate))}
        else {BoolMult(randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate),randomformgen(maxdepth - 1, maxnumbofvars, grate, multrate))}
    }
}




//парсим строки в формулы
s2bf(str : string) -> BoolForm {
    b_gr = "#include bool.lingo";
    parsic(
        compilePegGrammar(b_gr),
        str,
        defaultPegActions
    )
}

//записываем формулы в строки
bf2s(f : BoolForm) -> string {
    switch (f) {
        BoolAdd(a1,a2): "(" + bf2s(a1) + "\\/" +  bf2s(a2) + ")";
        BoolMult(a1,a2): "(" + bf2s(a1) + "/\\" +  bf2s(a2) + ")";
        BoolImpl(a1,a2): "(" + bf2s(a1) + "->" + bf2s(a2) + ")";
        BoolNeg(a1): "Not_"  + bf2s(a1);
        BoolTrue(): "T";
        BoolFalse(): "F";
        BoolVar(a): a;
    }
}

//находим переменные в формуле
favit(f : BoolForm) -> [string] {
        switch (f) {
        BoolAdd(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolMult(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolImpl(a1,a2): concatA([favit(a1),favit(a2)]);
        BoolNeg(a1): favit(a1);
        BoolTrue(): [];
        BoolFalse(): [];
        BoolVar(a): [a];
    }
}

//записываем переменные из формулы в дерево с дефолтным значением true
bf2t(f : BoolForm) -> Tree<string, bool> {
    mas = favit(f);
    new_tree = makeTree();
    g = \t,e->setTree(t,e, true);
    fold(mas, new_tree, g);
}

//ищем значение по дереву с дефолтным значением true
tiv(t : Tree<string, bool>, s : string) -> bool {
    lookupTreeDef(t, s, true);
}

//вычисляем формулы
evf(f : BoolForm, t : Tree<string, bool>) -> bool {
        impl = \x,y -> (!x)||y;
        switch (f) {
        BoolAdd(a1,a2): evf(a1,t)||evf(a2,t);
        BoolMult(a1,a2): evf(a1,t)&&evf(a2,t);
        BoolImpl(a1,a2): impl(evf(a1,t),evf(a2,t));
        BoolNeg(a1): !evf(a1,t);
        BoolTrue(): true;
        BoolFalse(): false;
        BoolVar(a): tiv(t,a);
    }    
}

//прикрепляем деревья
mt2mt1(tl : Tree<?, ??>, tc : Tree<?, ??>, tr : Tree<?, ??> ) -> Tree<?, ??> {
    switch (tc) {
        TreeEmpty() : TreeEmpty();
        TreeNode(key, value, left, right, depth) : TreeNode(key, value, tl, tr, depth);
    } 
}

//прикреплеям массив деревьев к одному дереву
mt2mt2(ml : [Tree<?, ??>], tc : Tree<?, ??>, mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    f = \r -> map(ml,(\l->mt2mt1(l,tc,r)));
    concatA(map(mr, f));
}

//прикрепляем массив деревьев к массиву деревьев
mt2mt3(ml : [Tree<?, ??>], mc : [Tree<?, ??>], mr : [Tree<?, ??>] ) -> [Tree<?, ??>] {
    concatA(map(mc,(\c->mt2mt2(ml,c,mr))));
}

//создаем все варинты значений для дерева
t2mts (t : Tree<string, bool>) -> [Tree<string, bool>] {
    switch (t) {
        TreeEmpty() : [TreeEmpty()];
        TreeNode(key, value, left, right, depth) : mt2mt3(t2mts(left),[TreeNode(key, true, left, right, depth),TreeNode(key, false, left, right, depth)],t2mts(right));
    }
}

//проверяем формулу из строки
chf(str : string) -> bool {
    form = s2bf(str);
    vars = t2mts(bf2t(form));
    out = findiDef(map(vars,(\vs->evf(form, vs))),\x->x,-1);
    if (out == -1) {
        false;
    }
    else {
        println(vars[out]);
        true;
    }
}

//выписываем значения в строку
t2ms (t : Tree<string, bool>) -> string {
    switch (t) {
        TreeEmpty() : "";
        TreeNode(key, value, left, right, depth) : key + " = " + b2s(value) + " ; " + t2ms(left) + t2ms(right) ;
    }
}

//проверяем формулу
chff(form : BoolForm) -> bool {
    vars = t2mts(bf2t(form));
    out = findiDef(map(vars,(\vs->evf(form, vs))),\x->x,-1);
    if (out == -1) {
        false;
    } 
    else {
        println(t2ms(vars[out]));
        true;
    }
}

//убрать импликации
notimpl (f : BoolForm) -> BoolForm {
    switch (f) {
        BoolAdd(a1,a2): BoolAdd(notimpl(a1),notimpl(a2));
        BoolMult(a1,a2): BoolMult(notimpl(a1),notimpl(a2));
        BoolImpl(a1,a2): BoolAdd(BoolNeg(notimpl(a1)),notimpl(a2));
        BoolNeg(a1): BoolNeg(notimpl(a1));
        BoolTrue(): BoolTrue();
        BoolFalse(): BoolFalse();
        BoolVar(a): BoolVar(a);
    }    
}

//ищем отрицания
sfornot (f : BoolForm) -> BoolForm {
    switch (f) {
        BoolAdd(a1,a2): BoolAdd(sfornot(a1),sfornot(a2));
        BoolMult(a1,a2): BoolMult(sfornot(a1),sfornot(a2));
        BoolNeg(a1): findnot(a1);
        BoolTrue(): BoolTrue();
        BoolFalse(): BoolFalse();
        BoolVar(a): BoolVar(a);
        default: f;
    }    
}

//протаскиваем отрицание
findnot (f : BoolForm) -> BoolForm {
    switch (f) {
        BoolAdd(a1,a2): BoolMult(findnot(a1),findnot(a2));
        BoolMult(a1,a2): BoolAdd(findnot(a1),findnot(a2));
        BoolNeg(a1): sfornot(a1);
        BoolTrue(): BoolFalse();
        BoolFalse(): BoolTrue();
        BoolVar(a): BoolNeg(BoolVar(a));
        default: f;
    }    
}

//BoolAdd(a1,a2): "(" + bf2s(a1) + "\\/" +  bf2s(a2) + ")"

//когда нашли или
dowor (a1 : BoolForm, a2 : BoolForm) -> BoolForm {
    switch (a1) {
        BoolAdd(b1,b2): switch (a2) {
            BoolAdd(c1,c2): BoolAdd(sforor(a1),sforor(a2));
            BoolMult(c1,c2): BoolMult(BoolAdd(a1,c1),BoolAdd(a1,c2));
            default: BoolAdd(sforor(a1),a2);
            }
        BoolMult(b1,b2): BoolMult(BoolAdd(b1,a2),BoolAdd(b2,a2));
        default: switch (a2) {
            BoolAdd(c1,c2): BoolAdd(a1,sforor(a2));
            BoolMult(c1,c2): BoolMult(BoolAdd(a1,c1),BoolAdd(a1,c2));
            default: BoolAdd(a1,a2);
            }
    }
}

//ищем или
sforor (f : BoolForm) -> BoolForm {
    switch (f) {
        BoolAdd(a1,a2): dowor(a1,a2);
        BoolMult(a1,a2): BoolMult(sforor(a1),sforor(a2));
        default: f;
    }    
}

//приводим к кнф без подготовительных шагов
longcnf (f : BoolForm) -> BoolForm {
    nf = sforor(f);
    if (f == nf) {
        f;
    }
    else {
        longcnf(nf);
    }
}

//приводим к кнф 
cnf (f : BoolForm) -> BoolForm {
    longcnf(sfornot(notimpl(f)));
}

//CNF
arraycnf (f : BoolForm) -> [[BoolForm]] {
    switch (f) {
        BoolMult(a1,a2): concatA([arraycnf(a1),arraycnf(a2)]);
        BoolAdd(a1,a2): [arraycnfd(f)];
        default: [[f]];
    }
}

//кнф в массив на или
arraycnfd (f : BoolForm) -> [BoolForm] {
    switch (f) {
        BoolAdd(a1,a2): concatA([arraycnfd(a1),arraycnfd(a2)]);
        default: [f];
    }
}

//кнф из массива в сет
setcnf (ms : [[BoolForm]]) -> Set<Set<BoolForm>> {
    buildSet(map(ms,buildSet));
}

//печатаем формулу из сета
nicesetcnfprint (ms : Set<Set<BoolForm>>) -> void {
    //println(sizeSet(ms));
    g = \m -> mapSet(m,bf2s);
    ft = mapSet(ms,g);
    st = mapSet(ft,set2array);
    println(set2array(st));
}

//печатаем формулу из массива
nicearraycnfprint (ms : [[BoolForm]]) -> void {
    g = \m -> map(m,bf2s);
    println(length(ms));
    println(map(ms,g));
}

//удобный фильтр
myfilterSet(s : Set<Set<?>>, fn : (Set<?>) -> bool, tr : (Set<?>) -> Set<?> ) -> Set<Set<?>> {
    foldSet(s, makeSet(), \acc, x -> {
        if (fn(x)) {
            insertSet(acc, tr(x))
        } else {
            acc
        }
    })
}

//убираем дизъюнкции с правдой и ложь из конъюнкци
remtr (ms : Set<Set<BoolForm>>) -> Set<Set<BoolForm>>{
    g = \x -> !containsSet(x, BoolTrue());
    f = \x -> removeSet(x, BoolFalse());
    myfilterSet(ms,g,f);
}

//проверяем обстановку
mout (ms : Set<Set<BoolForm>>) -> int {
    if (isEmptySet(ms)) {
        1;
    }
    else if (containsSet(ms,makeSet())) {
        -1;
    }
    else {
        0;
    }
}

//так как свитч терминальный... а все-таки это пригодилось
locchangevar (var : BoolForm) -> BoolForm {
    switch (var) {
        BoolNeg(a): a;
        BoolVar(a): BoolNeg(var);
        default : BoolTrue();
    }    
}

//удобное означивание
neweval (ms : Set<Set<BoolForm>>, var : BoolForm) -> Set<Set<BoolForm>> {
    notvar = locchangevar(var);
    g = \x -> !containsSet(x, var);
    f = \x -> removeSet(x, notvar);
    myfilterSet(ms,g,f);
}

//добавляем переменную на выход
addvar1 (buf : Maybe<Tree<string, bool>>, var : BoolForm) -> Maybe<Tree<string, bool>> {
    switch (buf) {
        None(): None();
        Some(a): switch (var) {
            BoolNeg(a1): switch (a1) {
                BoolVar(a2): Some(setTree(a, a2, false));
                default: None();
            }
            BoolVar(a1): Some(setTree(a, a1, true));
            default: None();
        } 
    }
}

//тернарный оператор не сработал...
myh (x : BoolForm, y : int, z : Pair<BoolForm, int>) -> Pair<BoolForm, int>{
    if (z.second>y) {
        z;
    }
    else {
        Pair(x,y);
    }
}

//число вхождений переменной в формулу
quf (ms : Set<Set<BoolForm>>, var : BoolForm) -> int {
    f = \x, y -> x + b2i(containsSet(y,var)||containsSet(y,locchangevar(var)));
    foldSet(ms, 0, f);
}

//чисто так, но оптимизация кода полностью отутсвует...
//DPLL без приведения к правильному cnf
mydpll (ms : Set<Set<BoolForm>>,buf : Maybe<Tree<string, bool>>) -> Maybe<Tree<string, bool>> {
    
    //шаг 0
    ch = mout(ms);
    if (ch == 1) {
        buf;
    }
    else if (ch == 0){
        //шаг 1
        f = \x -> (sizeSet(x) == 1);
        ns = filterSet(ms, f);
        if (!(isEmptySet(ns))) {
            nss = set2array(mapSet(ns, set2array));
            myvar = nss[0][0];
            mydpll(neweval(ms,myvar),addvar1(buf,myvar));
        }
        else {
            //шаг 2
            nms = mergeSetsA(set2array(ms));
            g = \x -> !(containsSet(nms, locchangevar(x)));
            fnms = filterSet(nms, g);
            if (!(isEmptySet(fnms))) {
                fnmss = set2array(fnms);
                myvar = fnmss[0];
                mydpll(neweval(ms,myvar),addvar1(buf,myvar));
            }
            else {
                //шаг 3
                //ветвимся по самой частой по вхождению переменной
                tnms = nms.tree;
                gf = \x, y -> quf(ms, x);
                ftnms = mapTree2(tnms, gf);
                
                fvar = foldTree(ftnms, Pair(BoolTrue(), 0), myh).first;
                out1 = mydpll(neweval(ms,fvar),addvar1(buf,fvar));
                if (out1 == None()) {
                    nfvar = locchangevar(fvar);
                    mydpll(neweval(ms,nfvar),addvar1(buf,nfvar));
                }
                else {
                    out1;
                }
            }
        }

    }
    else {
        None();
    }
}

main() {
   ftest();
}

ftest() -> void {
    maxdepth = 5;
    maxnumbofvars = 5;
    grate = 10;
    multrate = 1;
    form = randomformgen(maxdepth,maxnumbofvars,grate,multrate);
    println(bf2s(form));
    newform = cnf(form);
    arrform = arraycnf(newform);
    setform = setcnf(arrform);
    simpsetform = remtr(setform);
    nicesetcnfprint(simpsetform);
    println(mydpll(simpsetform,Some(makeTree()))); 

}

sometest1() -> void {
    comlowstr = "((a\\/Not_b)/\\((d\\/(a\\/Not_b))/\\(Not_d\\/(Not_a\\/b))))";
    comlowstr2 = "(Not_(a/\\(b\\/(d/\\e)))->Not_(a/\\(b\\/(d/\\e))))";
    form = s2bf(comlowstr);
    println(bf2s(form));
    newform = cnf(form);
    //println(bf2s(newform));
    arrform = arraycnf(newform);
    //nicearraycnfprint(arrform);
    setform = setcnf(arrform);
    //nicesetcnfprint(setform);
    simpsetform = remtr(setform);
    nicesetcnfprint(simpsetform);
    println(mydpll(simpsetform,Some(makeTree())));
}

sometest2() -> void {
    maxdepth = 3;
    maxnumbofvars = 2;
    grate = 10;
    multrate = 0;
    form = randomformgen(maxdepth,maxnumbofvars,grate,multrate);
    println(bf2s(form));
    woutiumpl = notimpl(form);
    println(bf2s(woutiumpl));
    sfor = sfornot(woutiumpl);
    println(bf2s(sfor));
}

sometest3() -> void {
    maxdepth = 4;
    maxnumbofvars = 3;
    grate = 10;
    multrate = 1;
    form = randomformgen(maxdepth,maxnumbofvars,grate,multrate);
    println(bf2s(form));
    newform = cnf(form);
    println(bf2s(newform)); 
}